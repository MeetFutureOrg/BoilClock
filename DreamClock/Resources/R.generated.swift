//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.image` struct is generated, and contains static references to 12 images.
  struct image {
    /// Image `dc_ic_calendar_add_filled_24_24x24_`.
    static let dc_ic_calendar_add_filled_24_24x24_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "dc_ic_calendar_add_filled_24_24x24_")
    /// Image `dc_ic_calendar_add_outline_24_24x24_`.
    static let dc_ic_calendar_add_outline_24_24x24_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "dc_ic_calendar_add_outline_24_24x24_")
    /// Image `dc_ic_cell_disclosure`.
    static let dc_ic_cell_disclosure = Rswift.ImageResource(bundle: R.hostingBundle, name: "dc_ic_cell_disclosure")
    /// Image `dc_ic_cell_language`.
    static let dc_ic_cell_language = Rswift.ImageResource(bundle: R.hostingBundle, name: "dc_ic_cell_language")
    /// Image `dc_ic_cell_night_mode`.
    static let dc_ic_cell_night_mode = Rswift.ImageResource(bundle: R.hostingBundle, name: "dc_ic_cell_night_mode")
    /// Image `dc_ic_cell_sound`.
    static let dc_ic_cell_sound = Rswift.ImageResource(bundle: R.hostingBundle, name: "dc_ic_cell_sound")
    /// Image `dc_ic_cell_tapic_engine`.
    static let dc_ic_cell_tapic_engine = Rswift.ImageResource(bundle: R.hostingBundle, name: "dc_ic_cell_tapic_engine")
    /// Image `dc_ic_cell_theme`.
    static let dc_ic_cell_theme = Rswift.ImageResource(bundle: R.hostingBundle, name: "dc_ic_cell_theme")
    /// Image `dc_ic_clock_filled_24_24x24_`.
    static let dc_ic_clock_filled_24_24x24_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "dc_ic_clock_filled_24_24x24_")
    /// Image `dc_ic_clock_outline_24_24x24_`.
    static let dc_ic_clock_outline_24_24x24_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "dc_ic_clock_outline_24_24x24_")
    /// Image `dc_ic_settings_internal_filled_24_24x24_`.
    static let dc_ic_settings_internal_filled_24_24x24_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "dc_ic_settings_internal_filled_24_24x24_")
    /// Image `dc_ic_settings_outline_24_24x24_`.
    static let dc_ic_settings_outline_24_24x24_ = Rswift.ImageResource(bundle: R.hostingBundle, name: "dc_ic_settings_outline_24_24x24_")
    
    /// `UIImage(named: "dc_ic_calendar_add_filled_24_24x24_", bundle: ..., traitCollection: ...)`
    static func dc_ic_calendar_add_filled_24_24x24_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dc_ic_calendar_add_filled_24_24x24_, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dc_ic_calendar_add_outline_24_24x24_", bundle: ..., traitCollection: ...)`
    static func dc_ic_calendar_add_outline_24_24x24_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dc_ic_calendar_add_outline_24_24x24_, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dc_ic_cell_disclosure", bundle: ..., traitCollection: ...)`
    static func dc_ic_cell_disclosure(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dc_ic_cell_disclosure, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dc_ic_cell_language", bundle: ..., traitCollection: ...)`
    static func dc_ic_cell_language(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dc_ic_cell_language, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dc_ic_cell_night_mode", bundle: ..., traitCollection: ...)`
    static func dc_ic_cell_night_mode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dc_ic_cell_night_mode, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dc_ic_cell_sound", bundle: ..., traitCollection: ...)`
    static func dc_ic_cell_sound(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dc_ic_cell_sound, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dc_ic_cell_tapic_engine", bundle: ..., traitCollection: ...)`
    static func dc_ic_cell_tapic_engine(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dc_ic_cell_tapic_engine, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dc_ic_cell_theme", bundle: ..., traitCollection: ...)`
    static func dc_ic_cell_theme(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dc_ic_cell_theme, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dc_ic_clock_filled_24_24x24_", bundle: ..., traitCollection: ...)`
    static func dc_ic_clock_filled_24_24x24_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dc_ic_clock_filled_24_24x24_, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dc_ic_clock_outline_24_24x24_", bundle: ..., traitCollection: ...)`
    static func dc_ic_clock_outline_24_24x24_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dc_ic_clock_outline_24_24x24_, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dc_ic_settings_internal_filled_24_24x24_", bundle: ..., traitCollection: ...)`
    static func dc_ic_settings_internal_filled_24_24x24_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dc_ic_settings_internal_filled_24_24x24_, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dc_ic_settings_outline_24_24x24_", bundle: ..., traitCollection: ...)`
    static func dc_ic_settings_outline_24_24x24_(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dc_ic_settings_outline_24_24x24_, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `Launch Screen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "Launch Screen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 4 localization tables.
  struct string {
    /// This `R.string.infoPlist` struct is generated, and contains static references to 1 localization keys.
    struct infoPlist {
      /// en translation: Dream Clock
      /// 
      /// Locales: en, zh-Hans
      static let cfBundleDisplayName = Rswift.StringResource(key: "CFBundleDisplayName", tableName: "infoPlist", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      
      /// en translation: Dream Clock
      /// 
      /// Locales: en, zh-Hans
      static func cfBundleDisplayName(_: Void = ()) -> String {
        return NSLocalizedString("CFBundleDisplayName", tableName: "infoPlist", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.launchScreen` struct is generated, and contains static references to 2 localization keys.
    struct launchScreen {
      /// en translation: Copyright © 2018 FlyWake Studio.
      /// 
      /// Locales: en, zh-Hans
      static let obGY5KRdText = Rswift.StringResource(key: "obG-Y5-kRd.text", tableName: "Launch Screen", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Dream Clock
      /// 
      /// Locales: en, zh-Hans
      static let gJdYhRWbText = Rswift.StringResource(key: "GJd-Yh-RWb.text", tableName: "Launch Screen", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      
      /// en translation: Copyright © 2018 FlyWake Studio.
      /// 
      /// Locales: en, zh-Hans
      static func obGY5KRdText(_: Void = ()) -> String {
        return NSLocalizedString("obG-Y5-kRd.text", tableName: "Launch Screen", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Dream Clock
      /// 
      /// Locales: en, zh-Hans
      static func gJdYhRWbText(_: Void = ()) -> String {
        return NSLocalizedString("GJd-Yh-RWb.text", tableName: "Launch Screen", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 34 localization keys.
    struct localizable {
      /// en translation: (Tapic Engine)
      /// 
      /// Locales: en, zh-Hans
      static let settingsPreferencesTapicEngine = Rswift.StringResource(key: "settings.preferences.tapicEngine", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Alarm
      /// 
      /// Locales: en, zh-Hans
      static let navigationTitleAlarm = Rswift.StringResource(key: "navigation.title.alarm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Blue
      /// 
      /// Locales: en, zh-Hans
      static let settingsPreferencesThemeColorBlue = Rswift.StringResource(key: "settings.preferences.theme.color.blue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Choose Language
      /// 
      /// Locales: en, zh-Hans
      static let settingsPreferencesLanguageNavigationTitle = Rswift.StringResource(key: "settings.preferences.language.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Choose Theme Color
      /// 
      /// Locales: en, zh-Hans
      static let settingsPreferencesThemeNavigationTitle = Rswift.StringResource(key: "settings.preferences.theme.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: ERROR!
      /// 
      /// Locales: en, zh-Hans
      static let applicationHudDefaultTitleError = Rswift.StringResource(key: "application.hud.default.title.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Events
      /// 
      /// Locales: en, zh-Hans
      static let navigationTitleEvents = Rswift.StringResource(key: "navigation.title.events", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Green
      /// 
      /// Locales: en, zh-Hans
      static let settingsPreferencesThemeColorGreen = Rswift.StringResource(key: "settings.preferences.theme.color.green", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Haptic Feedback
      /// 
      /// Locales: en, zh-Hans
      static let settingsPreferencesHapticFeedback = Rswift.StringResource(key: "settings.preferences.hapticFeedback", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: INFO!
      /// 
      /// Locales: en, zh-Hans
      static let applicationHudDefaultTitleInfo = Rswift.StringResource(key: "application.hud.default.title.info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Language
      /// 
      /// Locales: en, zh-Hans
      static let settingsPreferencesLanguage = Rswift.StringResource(key: "settings.preferences.language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Language Changed
      /// 
      /// Locales: en, zh-Hans
      static let settingsPreferencesLanguageChooseHudTitle = Rswift.StringResource(key: "settings.preferences.language.choose.hud.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Lime
      /// 
      /// Locales: en, zh-Hans
      static let settingsPreferencesThemeColorLime = Rswift.StringResource(key: "settings.preferences.theme.color.lime", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Magenta
      /// 
      /// Locales: en, zh-Hans
      static let settingsPreferencesThemeColorMagenta = Rswift.StringResource(key: "settings.preferences.theme.color.magenta", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Night Mode
      /// 
      /// Locales: en, zh-Hans
      static let settingsPreferencesNightMode = Rswift.StringResource(key: "settings.preferences.nightMode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Nothing In Here
      /// 
      /// Locales: en, zh-Hans
      static let applicationViewEmptyDataTitle = Rswift.StringResource(key: "application.view.emptyData.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Pink
      /// 
      /// Locales: en, zh-Hans
      static let settingsPreferencesThemeColorPink = Rswift.StringResource(key: "settings.preferences.theme.color.pink", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Preferences
      /// 
      /// Locales: en, zh-Hans
      static let settingsPreferencesSectionTitle = Rswift.StringResource(key: "settings.preferences.section.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Purple
      /// 
      /// Locales: en, zh-Hans
      static let settingsPreferencesThemeColorPurple = Rswift.StringResource(key: "settings.preferences.theme.color.purple", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Red
      /// 
      /// Locales: en, zh-Hans
      static let settingsPreferencesThemeColorRed = Rswift.StringResource(key: "settings.preferences.theme.color.red", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: SUCCESS!
      /// 
      /// Locales: en, zh-Hans
      static let applicationHudDefaultTitleSuccess = Rswift.StringResource(key: "application.hud.default.title.success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Settings
      /// 
      /// Locales: en, zh-Hans
      static let navigationTitleSettings = Rswift.StringResource(key: "navigation.title.settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Sky Blue
      /// 
      /// Locales: en, zh-Hans
      static let settingsPreferencesThemeColorSkyBlue = Rswift.StringResource(key: "settings.preferences.theme.color.skyBlue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Sound
      /// 
      /// Locales: en, zh-Hans
      static let settingsPreferencesSound = Rswift.StringResource(key: "settings.preferences.sound", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Theme
      /// 
      /// Locales: en, zh-Hans
      static let settingsPreferencesTheme = Rswift.StringResource(key: "settings.preferences.theme", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Theme Changed
      /// 
      /// Locales: en, zh-Hans
      static let settingsPreferencesThemeChooseHudTitle = Rswift.StringResource(key: "settings.preferences.theme.choose.hud.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: WARNING!
      /// 
      /// Locales: en, zh-Hans
      static let applicationHudDefaultTitleWarning = Rswift.StringResource(key: "application.hud.default.title.warning", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Watermelon
      /// 
      /// Locales: en, zh-Hans
      static let settingsPreferencesThemeColorWatermelon = Rswift.StringResource(key: "settings.preferences.theme.color.watermelon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Your app language has been change to:  
      /// 
      /// Locales: en, zh-Hans
      static let settingsPreferencesLanguageChooseHudBody = Rswift.StringResource(key: "settings.preferences.language.choose.hud.body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Your app theme has been change to:  
      /// 
      /// Locales: en, zh-Hans
      static let settingsPreferencesThemeChooseHudBody = Rswift.StringResource(key: "settings.preferences.theme.choose.hud.body", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Your operation already submitted.
      /// 
      /// Locales: en, zh-Hans
      static let applicationHudDefaultBodyInfo = Rswift.StringResource(key: "application.hud.default.body.info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Your operation has been completed.
      /// 
      /// Locales: en, zh-Hans
      static let applicationHudDefaultBodySuccess = Rswift.StringResource(key: "application.hud.default.body.success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Your operation has been failed.
      /// 
      /// Locales: en, zh-Hans
      static let applicationHudDefaultBodyError = Rswift.StringResource(key: "application.hud.default.body.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Your operation may exist or cause problems.
      /// 
      /// Locales: en, zh-Hans
      static let applicationHudDefaultBodyWarning = Rswift.StringResource(key: "application.hud.default.body.warning", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      
      /// en translation: (Tapic Engine)
      /// 
      /// Locales: en, zh-Hans
      static func settingsPreferencesTapicEngine(_: Void = ()) -> String {
        return NSLocalizedString("settings.preferences.tapicEngine", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Alarm
      /// 
      /// Locales: en, zh-Hans
      static func navigationTitleAlarm(_: Void = ()) -> String {
        return NSLocalizedString("navigation.title.alarm", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Blue
      /// 
      /// Locales: en, zh-Hans
      static func settingsPreferencesThemeColorBlue(_: Void = ()) -> String {
        return NSLocalizedString("settings.preferences.theme.color.blue", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Choose Language
      /// 
      /// Locales: en, zh-Hans
      static func settingsPreferencesLanguageNavigationTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.preferences.language.navigation.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Choose Theme Color
      /// 
      /// Locales: en, zh-Hans
      static func settingsPreferencesThemeNavigationTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.preferences.theme.navigation.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ERROR!
      /// 
      /// Locales: en, zh-Hans
      static func applicationHudDefaultTitleError(_: Void = ()) -> String {
        return NSLocalizedString("application.hud.default.title.error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Events
      /// 
      /// Locales: en, zh-Hans
      static func navigationTitleEvents(_: Void = ()) -> String {
        return NSLocalizedString("navigation.title.events", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Green
      /// 
      /// Locales: en, zh-Hans
      static func settingsPreferencesThemeColorGreen(_: Void = ()) -> String {
        return NSLocalizedString("settings.preferences.theme.color.green", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Haptic Feedback
      /// 
      /// Locales: en, zh-Hans
      static func settingsPreferencesHapticFeedback(_: Void = ()) -> String {
        return NSLocalizedString("settings.preferences.hapticFeedback", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: INFO!
      /// 
      /// Locales: en, zh-Hans
      static func applicationHudDefaultTitleInfo(_: Void = ()) -> String {
        return NSLocalizedString("application.hud.default.title.info", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Language
      /// 
      /// Locales: en, zh-Hans
      static func settingsPreferencesLanguage(_: Void = ()) -> String {
        return NSLocalizedString("settings.preferences.language", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Language Changed
      /// 
      /// Locales: en, zh-Hans
      static func settingsPreferencesLanguageChooseHudTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.preferences.language.choose.hud.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Lime
      /// 
      /// Locales: en, zh-Hans
      static func settingsPreferencesThemeColorLime(_: Void = ()) -> String {
        return NSLocalizedString("settings.preferences.theme.color.lime", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Magenta
      /// 
      /// Locales: en, zh-Hans
      static func settingsPreferencesThemeColorMagenta(_: Void = ()) -> String {
        return NSLocalizedString("settings.preferences.theme.color.magenta", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Night Mode
      /// 
      /// Locales: en, zh-Hans
      static func settingsPreferencesNightMode(_: Void = ()) -> String {
        return NSLocalizedString("settings.preferences.nightMode", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Nothing In Here
      /// 
      /// Locales: en, zh-Hans
      static func applicationViewEmptyDataTitle(_: Void = ()) -> String {
        return NSLocalizedString("application.view.emptyData.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Pink
      /// 
      /// Locales: en, zh-Hans
      static func settingsPreferencesThemeColorPink(_: Void = ()) -> String {
        return NSLocalizedString("settings.preferences.theme.color.pink", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Preferences
      /// 
      /// Locales: en, zh-Hans
      static func settingsPreferencesSectionTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.preferences.section.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Purple
      /// 
      /// Locales: en, zh-Hans
      static func settingsPreferencesThemeColorPurple(_: Void = ()) -> String {
        return NSLocalizedString("settings.preferences.theme.color.purple", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Red
      /// 
      /// Locales: en, zh-Hans
      static func settingsPreferencesThemeColorRed(_: Void = ()) -> String {
        return NSLocalizedString("settings.preferences.theme.color.red", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: SUCCESS!
      /// 
      /// Locales: en, zh-Hans
      static func applicationHudDefaultTitleSuccess(_: Void = ()) -> String {
        return NSLocalizedString("application.hud.default.title.success", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Settings
      /// 
      /// Locales: en, zh-Hans
      static func navigationTitleSettings(_: Void = ()) -> String {
        return NSLocalizedString("navigation.title.settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sky Blue
      /// 
      /// Locales: en, zh-Hans
      static func settingsPreferencesThemeColorSkyBlue(_: Void = ()) -> String {
        return NSLocalizedString("settings.preferences.theme.color.skyBlue", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sound
      /// 
      /// Locales: en, zh-Hans
      static func settingsPreferencesSound(_: Void = ()) -> String {
        return NSLocalizedString("settings.preferences.sound", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Theme
      /// 
      /// Locales: en, zh-Hans
      static func settingsPreferencesTheme(_: Void = ()) -> String {
        return NSLocalizedString("settings.preferences.theme", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Theme Changed
      /// 
      /// Locales: en, zh-Hans
      static func settingsPreferencesThemeChooseHudTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.preferences.theme.choose.hud.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: WARNING!
      /// 
      /// Locales: en, zh-Hans
      static func applicationHudDefaultTitleWarning(_: Void = ()) -> String {
        return NSLocalizedString("application.hud.default.title.warning", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Watermelon
      /// 
      /// Locales: en, zh-Hans
      static func settingsPreferencesThemeColorWatermelon(_: Void = ()) -> String {
        return NSLocalizedString("settings.preferences.theme.color.watermelon", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Your app language has been change to:  
      /// 
      /// Locales: en, zh-Hans
      static func settingsPreferencesLanguageChooseHudBody(_: Void = ()) -> String {
        return NSLocalizedString("settings.preferences.language.choose.hud.body", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Your app theme has been change to:  
      /// 
      /// Locales: en, zh-Hans
      static func settingsPreferencesThemeChooseHudBody(_: Void = ()) -> String {
        return NSLocalizedString("settings.preferences.theme.choose.hud.body", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Your operation already submitted.
      /// 
      /// Locales: en, zh-Hans
      static func applicationHudDefaultBodyInfo(_: Void = ()) -> String {
        return NSLocalizedString("application.hud.default.body.info", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Your operation has been completed.
      /// 
      /// Locales: en, zh-Hans
      static func applicationHudDefaultBodySuccess(_: Void = ()) -> String {
        return NSLocalizedString("application.hud.default.body.success", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Your operation has been failed.
      /// 
      /// Locales: en, zh-Hans
      static func applicationHudDefaultBodyError(_: Void = ()) -> String {
        return NSLocalizedString("application.hud.default.body.error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Your operation may exist or cause problems.
      /// 
      /// Locales: en, zh-Hans
      static func applicationHudDefaultBodyWarning(_: Void = ()) -> String {
        return NSLocalizedString("application.hud.default.body.warning", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.main` struct is generated, and contains static references to 0 localization keys.
    struct main {
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "Launch Screen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceType, Rswift.Validatable {
      let alarmViewController = StoryboardViewControllerResource<AlarmViewController>(identifier: "AlarmViewController")
      let bundle = R.hostingBundle
      let eventsViewController = StoryboardViewControllerResource<EventsViewController>(identifier: "EventsViewController")
      let languageViewController = StoryboardViewControllerResource<LanguageViewController>(identifier: "LanguageViewController")
      let mainTabBarController = StoryboardViewControllerResource<MainTabBarController>(identifier: "MainTabBarController")
      let name = "Main"
      let settingsViewController = StoryboardViewControllerResource<SettingsViewController>(identifier: "SettingsViewController")
      let themeViewController = StoryboardViewControllerResource<ThemeViewController>(identifier: "ThemeViewController")
      
      func alarmViewController(_: Void = ()) -> AlarmViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: alarmViewController)
      }
      
      func eventsViewController(_: Void = ()) -> EventsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: eventsViewController)
      }
      
      func languageViewController(_: Void = ()) -> LanguageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: languageViewController)
      }
      
      func mainTabBarController(_: Void = ()) -> MainTabBarController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainTabBarController)
      }
      
      func settingsViewController(_: Void = ()) -> SettingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsViewController)
      }
      
      func themeViewController(_: Void = ()) -> ThemeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: themeViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.main().settingsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsViewController' could not be loaded from storyboard 'Main' as 'SettingsViewController'.") }
        if _R.storyboard.main().alarmViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'alarmViewController' could not be loaded from storyboard 'Main' as 'AlarmViewController'.") }
        if _R.storyboard.main().eventsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'eventsViewController' could not be loaded from storyboard 'Main' as 'EventsViewController'.") }
        if _R.storyboard.main().themeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'themeViewController' could not be loaded from storyboard 'Main' as 'ThemeViewController'.") }
        if _R.storyboard.main().languageViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'languageViewController' could not be loaded from storyboard 'Main' as 'LanguageViewController'.") }
        if _R.storyboard.main().mainTabBarController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainTabBarController' could not be loaded from storyboard 'Main' as 'MainTabBarController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
